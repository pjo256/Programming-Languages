Implemented a limited Scheme interpreter. It is sufficiently complete to interpret itself.

Usage:

> (load "interpreter.scm")     ;loading interpreter into Scheme system                     
> (repl)                         ;invoking interpreter, note the change in prompt
--> (load "library.scm")         ;load the library file
--> (load "interpreter.scm")      ;loading intrepreter into interpreter
--> (repl)                          ; invoking 2nd interpreter
--> (define (fac x) (if (= x 0) 1 (* x (fac (- x 1)))))  ;defining factorial
--> (fac 4)                                              ;calling factorial
--> 24
--> (exit)                          ; exiting 2nd interpreter
--> (exit)                          ; exiting 1st interpreter
>                                ; back in scheme system

Handlers are used to parse syntax, but also make use of basic Scheme syntax (e.g. handle-if defined in terms of if). In a layer of interpretation, the semantics of any Scheme statement is resolved by the above. These handlers can therefore utilize Scheme syntax, since the semantics is eventually resolved by your system (e.g. Racket). That is, after first calling (repl), a call to a handler (e.g. handle-if), invoked by some input, will use syntax whose meaning is resolved by the Racket environment to determine what needs to be done in the current layer of interpretation.

On the other hand, library functions (assoc, map, append, etc.) must be defined at each layer of interpretation such that a reference to append correctly resolves a value containing the code for append. Hence the need to call (load "library.scm") in the example above.